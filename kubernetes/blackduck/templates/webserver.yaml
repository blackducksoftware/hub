apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: webserver
  name: {{ .Release.Name }}-blackduck-webserver
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: port-443
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    {{- include "bd.selectorLabelsWithoutVersion" . | nindent 4 }}
    component: webserver
  type: ClusterIP

{{- if and .Values.exposeui (eq .Values.exposedServiceType "OpenShift" ) }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: route
  name: {{ .Release.Name }}-blackduck
  namespace: {{ .Release.Namespace }}
spec:
  host: ""
  port:
    targetPort: port-443
  tls:
    termination: passthrough
  to:
    kind: Service
    name: {{ .Release.Name }}-blackduck-webserver
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - host: ""
{{- else if .Values.exposeui }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: webserver-exposed
  name: {{ .Release.Name }}-blackduck-webserver-exposed
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: port-443
      port: 443
      protocol: TCP
      targetPort: 8443
      {{- if and .Values.exposedNodePort (eq .Values.exposedServiceType "NodePort") }}
      nodePort: {{ .Values.exposedNodePort }}
      {{- end }}
  selector:
    app: blackduck
    name: {{ .Release.Name }}
    component: webserver
  type: {{ .Values.exposedServiceType }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "bd.labels" . | nindent 4 }}
    component: webserver
  name: {{ .Release.Name }}-blackduck-webserver
  namespace: {{ .Release.Namespace }}
spec:
  {{- if eq .Values.status "Running" }}
  replicas: 1
  {{- else }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      {{- include "bd.selectorLabelsWithoutVersion" . | nindent 6 }}
      component: webserver
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "bd.selectorLabels" . | nindent 8 }}
        component: webserver
      annotations:
        checksum/blackduck-config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/postgres-config: {{ include (print $.Template.BasePath "/postgres-config.yaml") . | sha256sum }}
      name: {{ .Release.Name }}-blackduck-webserver
    spec:
      {{- if .Values.enableInitContainer }}
      initContainers:
      - name: synopsys-init
        {{- if .Values.init.registry }}
        image: {{ .Values.init.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- else }}
        image: {{ .Values.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- end}}
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_HOST
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_PORT
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRESQL_USER
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_CONNECTION_ADMIN
              name: {{ .Release.Name }}-blackduck-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_ENABLE_SSL
              name: {{ .Release.Name }}-blackduck-db-config
        args:
        - "--postgres-database={{ .Values.init.database }}" # Postgres database name
        - "--postgres-host=$(POSTGRES_HOST)" # Postgres database host
        - "--postgres-password=$(POSTGRESQL_PASSWORD)" # Postgres database password
        - "--postgres-port=$(POSTGRES_PORT)" # Postgres database port
        - "--postgres-user=$(POSTGRESQL_USER)" # Postgres database user
        - "--postgres-ssl-mode=$(POSTGRES_SSL_MODE)" # Postgres SSL mode
        imagePullPolicy: Always
        {{- with .Values.init.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
      {{- end }}
      containers:
      - envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-blackduck-config
        {{- if .Values.webserver.registry }}
          {{- if .Values.webserver.imageTag }}
        image: {{ .Values.webserver.registry }}/blackduck-nginx:{{ .Values.webserver.imageTag }}
          {{- else }}
        image: {{ .Values.webserver.registry }}/blackduck-nginx:{{ .Values.imageTag }}
          {{- end}}
        {{- else }}
          {{- if .Values.webserver.imageTag }}
        image: {{ .Values.registry }}/blackduck-nginx:{{ .Values.webserver.imageTag }}
          {{- else }}
        image: {{ .Values.registry }}/blackduck-nginx:{{ .Values.imageTag }}
          {{- end}}
        {{- end}}
        imagePullPolicy: Always
        {{- include "webserverLivenessProbe" . | nindent 8 }}
        name: webserver
        ports:
        - containerPort: 8443
          protocol: TCP
        resources:
          {{- toYaml .Values.webserver.resources | nindent 12 }}
        {{- with .Values.webserver.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /opt/blackduck/hub/webserver/security
          name: dir-webserver
        {{- with .Values.tlsCertSecretName }}
        - mountPath: /tmp/secrets/WEBSERVER_CUSTOM_CERT_FILE
          name: certificate
          subPath: WEBSERVER_CUSTOM_CERT_FILE
        - mountPath: /tmp/secrets/WEBSERVER_CUSTOM_KEY_FILE
          name: certificate
          subPath: WEBSERVER_CUSTOM_KEY_FILE
        {{- end }}
        {{- with .Values.certAuthCACertSecretName }}
        - mountPath: /tmp/secrets/AUTH_CUSTOM_CA
          name: auth-custom-ca
          subPath: AUTH_CUSTOM_CA
        {{- end }}
      dnsPolicy: ClusterFirst
      {{- include "bd.imagePullSecrets" . | nindent 6 }}
      {{- with .Values.webserver.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.webserver.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.webserver.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- if .Values.webserver.podSecurityContext }}
      {{- with .Values.webserver.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- else }}
      {{- include "bd.podSecurityContext" . | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-blackduck-service-account
      restartPolicy: Always
      volumes:
      - emptyDir: {}
        name: dir-webserver
      {{- if .Values.tlsCertSecretName }}
      - name: certificate
        secret:
          defaultMode: 420
          secretName: {{ .Values.tlsCertSecretName }}
      {{- end }}
      {{- if .Values.certAuthCACertSecretName }}
      - name: auth-custom-ca
        secret:
          defaultMode: 420
          secretName: {{ .Values.certAuthCACertSecretName }}
      {{- end }}

{{- define "webserverLivenessProbe" -}}
{{- if .Values.enableLivenessProbe -}}
livenessProbe:
  exec:
    command:
    - /usr/local/bin/docker-healthcheck.sh
    - https://localhost:8443/health-checks/liveness
   {{- if .Values.tlsCertSecretName }}
    - /tmp/secrets/WEBSERVER_CUSTOM_CERT_FILE
   {{- else }}
    - /opt/blackduck/hub/webserver/security/root.crt
   {{- end }}
  failureThreshold: 10
  initialDelaySeconds: 180
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 10
{{- end -}}
{{- end -}}
